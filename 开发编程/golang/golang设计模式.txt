实现代码
https://github.com/BPing/golang_design_pattern/tree/master/pattern

创建型 C
结构型 J
行为型 X
   -AbstractFactory.go : 抽象工厂模式(C)
   -Adapter.go : 适配器模式(J)
   -Bridge.go : 桥接模式(J)
   -Builder.go : 建造者模式(C)
   -ChainOfResponsibility.go : 责任链模式(X)
   -Command.go : 命令模式(X)
   -Composite.go : 组合模式(J)
   -Decorator.go : 装饰器模式(J)
   -Facade.go : 外观模式(J)
   -Factory.go : 工厂模式(C)
   -Flyweight.go : 享元模式(J)
   -Interpreter.go : 解释器模式(X)
   -Iterator.go : 迭代器模式(X)
   -Mediator.go : 中介者模式(X)
   -Memento.go : 备忘录模式(X)
   -Observer.go : 观察者模式(X)
   -Prototype.go : 原型模式(C)
   -Proxy.go : 代理模式(J)
   -Singleton.go : 单例模式(C)
   -Singleton2.go : 单例模式(C)
   -State.go : 状态模式(X)
   -Strategy.go : 策略模式(X)
   -Template.go : 模板模式(X)
   -Visitor.go : 访问者模式(X)